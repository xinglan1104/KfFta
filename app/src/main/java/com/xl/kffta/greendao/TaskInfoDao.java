package com.xl.kffta.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.xl.kffta.model.sql.TaskInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TASK_INFO".
 */
public class TaskInfoDao extends AbstractDao<TaskInfo, Long> {

    public static final String TABLENAME = "TASK_INFO";

    /**
     * Properties of entity TaskInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ExecuteTime = new Property(1, String.class, "executeTime", false, "EXECUTE_TIME");
        public final static Property CodeName = new Property(2, String.class, "codeName", false, "CODE_NAME");
        public final static Property ExcutionStatus = new Property(3, int.class, "excutionStatus", false, "EXCUTION_STATUS");
    }


    public TaskInfoDao(DaoConfig config) {
        super(config);
    }

    public TaskInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"EXECUTE_TIME\" TEXT NOT NULL ," + // 1: executeTime
                "\"CODE_NAME\" TEXT NOT NULL ," + // 2: codeName
                "\"EXCUTION_STATUS\" INTEGER NOT NULL );"); // 3: excutionStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getExecuteTime());
        stmt.bindString(3, entity.getCodeName());
        stmt.bindLong(4, entity.getExcutionStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getExecuteTime());
        stmt.bindString(3, entity.getCodeName());
        stmt.bindLong(4, entity.getExcutionStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TaskInfo readEntity(Cursor cursor, int offset) {
        TaskInfo entity = new TaskInfo( //
                cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // executeTime
                cursor.getString(offset + 2), // codeName
                cursor.getInt(offset + 3) // excutionStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setExecuteTime(cursor.getString(offset + 1));
        entity.setCodeName(cursor.getString(offset + 2));
        entity.setExcutionStatus(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
